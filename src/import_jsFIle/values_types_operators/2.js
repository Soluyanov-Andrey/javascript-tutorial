/***********************************************
 * Изучаемая тема. Значения, Типы, Операторы
 * Работа с строками
 ***********************************************/

/**
 * js язык регистрозависимый
 * Идентификаторы принято называть с маленькой буквы name, current и тд . Если используется в имени
 * несколько слов, то в зависимости от ситуации могут использовать ту или иную нотация например нотация
 *
 * ------camel case
 * Первое слово пишется с маленькой а второе с большой буквы nameAction, currentDont, toUpperCase и тд
 *
 * ------Pascal case
 * Очень схож с camelCase, но первое слово в строке так же пишется с заглавной буквы.
 * Например ExampleCustomComponent
 *
 * ------Snake case (snake_case)
 * «Змеиный регистр» — заменяет пробелы на символ подчеркивания.
 * В JS он отлично подходит для именования полей в базах данных,
 * или для именования статичных данных, хранящихся в JSON.
 * {
 * "dark_olive_green": "#556B2F",
 * "medium_violet_red": "#C71585",
 * "light_goldenrod_yellow": "#FAFAD2
 * }
 *
 * ------Screaming snake case (SCREAMING_SNAKE_CASE)
 * UPPER_CASE_SNAKE_CASE
 * Подобным стилям чаще всего объявляют константы
 * const SECOND = 1000;
 *
 * ------Kebab case (kebab-case)
 * В js подобный стиль может быть только в кавычках
 * 'user-login-count': 5
 * Используют чаще всего  в URL-адресах (www.blog.com/cool-article-1)
 * или в названиях скачиваемых файлов (cool-article-1.pdf).
 */

/**
 * Обратный слэш используется для экранирования символов или обозначения спец знаков.
 */

console.log("hello\"ооооооо\"world");

console.log("hello\n\tworld");  //Перенос строки и табуляция.

/**
 * В js весь код хранится в юникоде,пробел в юникоде обозначается \u0020
 */

console.log("hello\u0020Pety")  // Выведет "hello Pety".

/**
 * Оператор +, при использовании между двумя строковыми операндами, вызывает их конкатенацию, то есть объединение.
 */
console.log("hello"+"world"); // Выведет "helloworld".
/**
 * В js оператор +, может выполнять роль арифметического и строкового.
 *  5 + 5 = 10 ; так оператор + выступает в виде арифметического оператора
 *  "цветок" + "красный" = "цветок красный" ; а так строковым
 */

/**
 * Строка в js есть объект, и у этого объекта есть различные методы и свойства.
 * Свойства хранит состояние, а метод описывает что нужно сделать, то-есть поведение.
 */
console.log("Planet".length); // Покажет длину строки 5, в данном примере length это свойство.
console.log("Planet".toUpperCase()); // Приведет строку к верхнему регистру HELLO, toUpperCase() это метод.
console.log("Planet".charAt(2)); //Выводит отдельный символ начиная с позиции 0 - "P", 1 - "l", 2 - "a". Выведет "a"
console.log("Planet".charCodeAt(1)); //Метод charCodeAt возвращает код символа (числовое значение).

/**
 * В js, строку можно поместить в двойные, одинарные или обратные кавычки
 */
console.log("Привет мир!!");
console.log('Привет мир!!');
console.log(`Привет мир!!`);

/**
 * Одинарные и двойные кавычки, равнозначны. Обратные могут применятся в дополнительных вариантах
 * например, вывести шаблон, ${5+10}
 */
console.log(`Привет мир!! ${5+10}`); // Выведет "Привет мир 15".
console.log("Привет мир!! ${5+10}"); // Выведет строку без расчёта "Привет мир!! ${5+10}".

